syntax = "proto3";

service Raft {
  rpc SetIsActive(SetIsActiveRequest) returns (SetIsActiveResponse);
  rpc GetIsActive(GetIsActiveRequest) returns (GetIsActiveResponse);

  rpc Stop(StopRequest) returns (StopResponse);
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse);

  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

  rpc AddPeer(AddPeerRequest) returns (AddPeerResponse);
  rpc RemovePeer(RemovePeerRequest) returns (RemovePeerResponse);

  rpc SendCommand(SendCommandRequest) returns (SendCommandResponse);
}

message SetIsActiveRequest { bool isActive = 1; }
message SetIsActiveResponse { bool isActive = 1; }

message GetIsActiveRequest { bool isActive = 1; }
message GetIsActiveResponse { bool isActive = 1; }

message StopRequest { bool stop = 1; }
message StopResponse { bool stopped = 1; }
message GetRoleRequest {}
message GetRoleResponse { string role = 1; }

message RequestVoteRequest {
  int32 term = 1;
  int32 candidateId = 2;
  int32 lastLogIndex = 3;
  int32 lastLogTerm = 4;
}
message RequestVoteResponse {
  int32 term = 1;
  bool voteGranted = 2;
}

message LogEntry {
  int32 term = 1;
  string command = 2;
}
message AppendEntriesRequest {
  int32 term = 1;
  int32 leaderId = 2;
  int32 prevLogIndex = 3;
  int32 prevLogTerm = 4;
  repeated LogEntry entries = 5;
  int32 leaderCommit = 6;
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
}

message AddPeerRequest { int32 port = 1; }
message AddPeerResponse { int32 port = 1; }

message RemovePeerRequest { int32 port = 1; }
message RemovePeerResponse { int32 port = 1; }

message SendCommandRequest { string command = 1; }
message SendCommandResponse { string status = 1; }